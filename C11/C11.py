import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# ✅ Strain and energy data
strain_values = np.array([
    -0.080, -0.079, -0.078, -0.077, -0.076, -0.075, -0.074, -0.073, -0.072, -0.071,
    -0.070, -0.069, -0.068, -0.067, -0.066, -0.065, -0.064, -0.063, -0.062, -0.061,
    -0.060, -0.059, -0.058, -0.057, -0.056, -0.055, -0.054, -0.053, -0.052, -0.051,
    -0.050, -0.049, -0.048, -0.047, -0.046, -0.045, -0.044, -0.043, -0.042, -0.041,
    -0.040, -0.039, -0.038, -0.037, -0.036, -0.035, -0.034, -0.033, -0.032, -0.031,
    -0.030, -0.029, -0.028, -0.027, -0.026, -0.025, -0.024, -0.023, -0.022, -0.021,
    -0.020, -0.019, -0.018, -0.017, -0.016, -0.015, -0.014, -0.013, -0.012, -0.011,
    -0.010, -0.009, -0.008, -0.007, -0.006, -0.005, -0.004, -0.003, -0.002, -0.001,
     0.000,  0.001,  0.002,  0.003,  0.004,  0.005,  0.006,  0.007,  0.008,  0.009,
     0.010,  0.011,  0.012,  0.013,  0.014,  0.015,  0.016,  0.017,  0.018,  0.019,
     0.020,  0.021,  0.022,  0.023,  0.024,  0.025,  0.026,  0.027,  0.028,  0.029,
     0.030,  0.031,  0.032,  0.033,  0.034,  0.035,  0.036,  0.037,  0.038,  0.039,
     0.040,  0.041,  0.042,  0.043,  0.044,  0.045,  0.046,  0.047,  0.048,  0.049,
     0.050,  0.051,  0.052,  0.053,  0.054,  0.055,  0.056,  0.057,  0.058,  0.059,
     0.060,  0.061,  0.062,  0.063,  0.064,  0.065,  0.066,  0.067,  0.068,  0.069,
     0.070,  0.071,  0.072,  0.073,  0.074,  0.075,  0.076,  0.077,  0.078,  0.079,
     0.080
])

energy_values = np.array([
    -1746.2956, -1746.8788, -1747.4532, -1748.0186, -1748.5755, -1749.1240, -1749.6640, -1750.1957, -1750.7189, -1751.2338,
    -1751.7405, -1752.2392, -1752.7300, -1753.2121, -1753.6848, -1754.1470, -1754.6002, -1755.0487, -1755.4964, -1755.9544,
    -1756.4068, -1756.8511, -1757.2874, -1757.7157, -1758.1361, -1758.5486, -1758.9532, -1759.3499, -1759.7388, -1760.1199,
    -1760.4933, -1760.8589, -1761.2169, -1761.5672, -1761.9099, -1762.2449, -1762.5725, -1762.8924, -1763.2049, -1763.5099,
    -1763.8075, -1764.0977, -1764.3805, -1764.6559, -1764.9240, -1765.1849, -1765.4385, -1765.6848, -1765.9240, -1766.1560,
    -1766.3809, -1766.5987, -1766.8094, -1767.0130, -1767.2097, -1767.3993, -1767.5820, -1767.7578, -1767.9267, -1768.0887,
    -1768.2439, -1768.3923, -1768.5339, -1768.6687, -1768.7968, -1768.9183, -1769.0330, -1769.1412, -1769.2427, -1769.3376,
    -1769.4260, -1769.5079, -1769.5833, -1769.6522, -1769.7146, -1769.7707, -1769.8204, -1769.8637, -1769.9007, -1769.9314,
    -1769.9558, -1769.9740, -1769.9860, -1769.9918, -1769.9914, -1769.9849, -1769.9722, -1769.9535, -1769.9288, -1769.8980,
    -1769.8612, -1769.8184, -1769.7697, -1769.7151, -1769.6545, -1769.5881, -1769.5159, -1769.4378, -1769.3540, -1769.2644,
    -1769.1690, -1769.0680, -1768.9613, -1768.8489, -1768.7308, -1768.6072, -1768.4780, -1768.3432, -1768.2029, -1768.0571,
    -1767.9058, -1767.7491, -1767.5869, -1767.4193, -1767.2464, -1767.0681, -1766.8844, -1766.6955, -1766.5013, -1766.3018,
    -1766.0971, -1765.8872, -1765.6722, -1765.4519, -1765.2266, -1764.9961, -1764.7606, -1764.5200, -1764.2744, -1764.0237,
    -1763.7681, -1763.5075, -1763.2420, -1762.9716, -1762.6963, -1762.4161, -1762.1311, -1761.8413, -1761.5467, -1761.2473,
    -1760.9432, -1760.6344, -1760.3209, -1760.0027, -1759.6798, -1759.3523, -1759.0202, -1758.6836, -1758.3424, -1757.9966,
    -1757.6464, -1757.2916, -1756.9324, -1756.5688, -1756.2007, -1755.8283, -1755.4515, -1755.0703, -1754.6848, -1754.2950,
    -1753.9010
])

# ✅ Lattice and box info
a0 = 3.61  # Å
V0 = (a0 * 5)**3  # Å³ for 5x5x5 unit cells

# ✅ Normalize and convert total energy to energy density
energy_values = (energy_values - min(energy_values)) / V0  # Now in eV/Å³


# ✅ Fit with a cubic polynomial: E(ε) = p0 + p1ε + p2ε² + p3ε³
def cubic_function(eps, p0, p1, p2, p3):
    return p0 + p1 * eps + p2 * eps**2 + p3 * eps**3

# Perform curve fitting
popt, _ = curve_fit(cubic_function, strain_values, energy_values)
p0, p1, p2, p3 = popt

# ✅ Plot
strain_fit = np.linspace(-0.08, 0.08, 500)
energy_fit = cubic_function(strain_fit, *popt)

plt.figure(figsize=(8, 6))
plt.scatter(strain_values, energy_values, color='dodgerblue', label="LAMMPS Data", s=20)
plt.plot(strain_fit, energy_fit, 'r--', label="Cubic Fit")
plt.xlabel("Strain (ε)")
plt.ylabel("Strain Energy Density (eV/Å³)")
plt.title("C11: Energy vs Uniaxial Strain")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig("C11_curve_fit.png", dpi=300)
plt.show()

# ✅ Lattice and box info
a0 = 3.61  # Å
V0 = (a0 * 5)**3  # Å³ for 5x5x5 unit cells

# ✅ C11 = (1/V0) * d²E/dε² = 2*p2 / V0 (at ε = 0)
C11_eVA3 = 2 * p2 
C11_GPa = C11_eVA3 * 160.21766208

# ✅ Output results
print("Cubic Fit Coefficients:")
print(f" p0: {p0:.6f}")
print(f" p1: {p1:.6f}")
print(f" p2: {p2:.6f}")
print(f" p3: {p3:.6f}")
print(f"\nC11 = {C11_eVA3:.8f} eV/Å³")
print(f"C11 = {C11_GPa:.2f} GPa")



