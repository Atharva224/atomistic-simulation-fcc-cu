import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# --- Input: Strain and energy data from LAMMPS ---
strain_values = np.linspace(-0.08, 0.08, 161)  # from -0.08 to +0.08 (step 0.001)
energy_values = np.array([
    -1769.5908, -1769.5999, -1769.6089, -1769.6177, -1769.6264, -1769.6351, -1769.6436, -1769.6519, -1769.6602, -1769.6684,
    -1769.6764, -1769.6843, -1769.6922, -1769.6999, -1769.7074, -1769.7149, -1769.7223, -1769.7295, -1769.7366, -1769.7437,
    -1769.7506, -1769.7573, -1769.7640, -1769.7706, -1769.7770, -1769.7834, -1769.7896, -1769.7957, -1769.8017, -1769.8075,
    -1769.8133, -1769.8189, -1769.8245, -1769.8299, -1769.8352, -1769.8404, -1769.8455, -1769.8504, -1769.8553, -1769.8600,
    -1769.8646, -1769.8691, -1769.8735, -1769.8778, -1769.8820, -1769.8860, -1769.8899, -1769.8938, -1769.8975, -1769.9011,
    -1769.9045, -1769.9079, -1769.9111, -1769.9143, -1769.9173, -1769.9202, -1769.9230, -1769.9257, -1769.9283, -1769.9307,
    -1769.9330, -1769.9353, -1769.9374, -1769.9394, -1769.9413, -1769.9430, -1769.9447, -1769.9462, -1769.9476, -1769.9489,
    -1769.9501, -1769.9512, -1769.9522, -1769.9531, -1769.9538, -1769.9544, -1769.9549, -1769.9553, -1769.9556, -1769.9558,
    -1769.9558, -1769.9558, -1769.9556, -1769.9553, -1769.9549, -1769.9544, -1769.9538, -1769.9531, -1769.9522, -1769.9512,
    -1769.9501, -1769.9489, -1769.9476, -1769.9462, -1769.9447, -1769.9430, -1769.9413, -1769.9394, -1769.9374, -1769.9353,
    -1769.9330, -1769.9307, -1769.9283, -1769.9257, -1769.9230, -1769.9202, -1769.9173, -1769.9143, -1769.9111, -1769.9079,
    -1769.9045, -1769.9011, -1769.8975, -1769.8938, -1769.8899, -1769.8860, -1769.8820, -1769.8778, -1769.8735, -1769.8691,
    -1769.8646, -1769.8600, -1769.8553, -1769.8504, -1769.8455, -1769.8404, -1769.8352, -1769.8299, -1769.8245, -1769.8189,
    -1769.8133, -1769.8075, -1769.8017, -1769.7957, -1769.7896, -1769.7834, -1769.7770, -1769.7706, -1769.7640, -1769.7573,
    -1769.7506, -1769.7437, -1769.7366, -1769.7295, -1769.7223, -1769.7149, -1769.7074, -1769.6999, -1769.6922, -1769.6843,
    -1769.6764, -1769.6684, -1769.6602, -1769.6519, -1769.6436, -1769.6351, -1769.6264, -1769.6177, -1769.6089, -1769.5999,
    -1769.5908
])

# --- Normalize energy ---
energy_values -= min(energy_values)

# --- Fit cubic polynomial: W(γ) = p0 + p1*γ + p2*γ² + p3*γ³ ---
def cubic(eps, p0, p1, p2, p3):
    return p0 + p1*eps + p2*eps**2 + p3*eps**3

popt, _ = curve_fit(cubic, strain_values, energy_values)
p0, p1, p2, p3 = popt

# --- Plot fit ---
fit_strain = np.linspace(-0.08, 0.08, 400)
fit_energy = cubic(fit_strain, *popt)

plt.figure(figsize=(7, 5))
plt.plot(fit_strain, fit_energy, 'r--', label='Cubic Fit')
plt.scatter(strain_values, energy_values, color='dodgerblue', s=25, label='LAMMPS Data')
plt.xlabel("Shear Strain (γ)")
plt.ylabel("Relative Potential Energy (eV)")
plt.title("C44: Energy vs Shear Strain")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig("C44_curve_fit.png", dpi=300)
plt.show()



# --- Constants ---
a0 = 3.61  # Å, lattice constant
V0 = (a0 * 5)**3  # Volume in Å³ for 5x5x5 unit cells

# --- Compute C44 ---
d2W_dg2 = 2 * p2  # Since W = p2 * γ² → d²W/dγ² = 2 * p2
C44_eVA3 = d2W_dg2 / V0  # eV/Å³
C44_GPa = C44_eVA3 * 160.21766208  # Conversion: 1 eV/Å³ = 160.21766208 GPa

# --- Print results ---
print("\n✅ C44 Calculation from Shear Strain Fit:")
print(f"Second derivative d²W/dγ² = {d2W_dg2:.6f} eV")
print(f"V0 (volume)               = {V0:.2f} Å³")
print(f"C44 = {C44_eVA3:.8f} eV/Å³")
print(f"C44 = {C44_GPa:.2f} GPa")
